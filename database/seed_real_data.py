"""
Seed Real Data for VieGo Blog
T·∫°o d·ªØ li·ªáu th·ª±c t·∫ø cho database: users, locations, posts, comments, likes, followers
"""

import pymysql
import sys
from datetime import datetime, timedelta
import random
from werkzeug.security import generate_password_hash

def get_connection():
    """K·∫øt n·ªëi database"""
    try:
        conn = pymysql.connect(
            host='localhost',
            user='root',
            password='',
            database='viego_blog',
            charset='utf8mb4',
            cursorclass=pymysql.cursors.DictCursor
        )
        return conn
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        print("üí° Th·ª≠ v·ªõi password 'root'...")
        try:
            conn = pymysql.connect(
                host='localhost',
                user='root',
                password='root',
                database='viego_blog',
                charset='utf8mb4',
                cursorclass=pymysql.cursors.DictCursor
            )
            return conn
        except Exception as e2:
            print(f"‚ùå V·∫´n l·ªói: {e2}")
            return None

def create_users(conn):
    """T·∫°o users th·ª±c t·∫ø"""
    print("\n" + "="*70)
    print("üë• T·∫°o Users...")
    print("="*70)
    
    users = [
        {
            'username': 'admin',
            'email': 'admin@viego.com',
            'password': 'Admin@123',
            'full_name': 'Administrator',
            'bio': 'System Administrator - VieGo Blog',
            'role': 'admin'
        },
        {
            'username': 'nguyenvana',
            'email': 'vana@gmail.com',
            'password': 'User@123',
            'full_name': 'Nguy·ªÖn VƒÉn A',
            'bio': 'Y√™u th√≠ch du l·ªãch kh√°m ph√° Vi·ªát Nam. ƒê√£ ƒëi qua 50+ t·ªânh th√†nh.',
            'role': 'user'
        },
        {
            'username': 'tranthib',
            'email': 'thib@gmail.com',
            'password': 'User@123',
            'full_name': 'Tr·∫ßn Th·ªã B',
            'bio': 'Travel blogger, photographer. ƒêam m√™ ch·ª•p ·∫£nh phong c·∫£nh.',
            'role': 'user'
        },
        {
            'username': 'leminhtuan',
            'email': 'minhtuan@gmail.com',
            'password': 'User@123',
            'full_name': 'L√™ Minh Tu·∫•n',
            'bio': 'Food blogger - Kh√°m ph√° ·∫©m th·ª±c Vi·ªát Nam',
            'role': 'user'
        },
        {
            'username': 'phamthuhang',
            'email': 'thuhang@gmail.com',
            'password': 'User@123',
            'full_name': 'Ph·∫°m Thu H·∫±ng',
            'bio': 'Backpacker - Budget travel specialist',
            'role': 'user'
        },
        {
            'username': 'editor01',
            'email': 'editor@viego.com',
            'password': 'Editor@123',
            'full_name': 'Bi√™n T·∫≠p Vi√™n',
            'bio': 'Content Editor - VieGo Blog',
            'role': 'editor'
        }
    ]
    
    with conn.cursor() as cursor:
        for user in users:
            try:
                # Check if user exists
                cursor.execute("SELECT id FROM users WHERE username = %s", (user['username'],))
                if cursor.fetchone():
                    print(f"   ‚ö†Ô∏è  User {user['username']} ƒë√£ t·ªìn t·∫°i, skip")
                    continue
                
                password_hash = generate_password_hash(user['password'])
                
                sql = """
                INSERT INTO users (username, email, password_hash, full_name, bio, role, is_active, email_verified)
                VALUES (%s, %s, %s, %s, %s, %s, TRUE, TRUE)
                """
                cursor.execute(sql, (
                    user['username'],
                    user['email'],
                    password_hash,
                    user['full_name'],
                    user['bio'],
                    user['role']
                ))
                
                print(f"   ‚úÖ {user['username']} ({user['role']}) - Password: {user['password']}")
                
            except Exception as e:
                print(f"   ‚ùå L·ªói t·∫°o user {user['username']}: {e}")
        
        conn.commit()
    
    print(f"\n‚úÖ Ho√†n t·∫•t t·∫°o users!")

def create_locations(conn):
    """T·∫°o locations th·ª±c t·∫ø ·ªü Vi·ªát Nam"""
    print("\n" + "="*70)
    print("üìç T·∫°o Locations...")
    print("="*70)
    
    locations = [
        {
            'name': 'V·ªãnh H·∫° Long',
            'address': 'Th√†nh ph·ªë H·∫° Long',
            'city': 'Qu·∫£ng Ninh',
            'country': 'Vi·ªát Nam',
            'latitude': 20.9101,
            'longitude': 107.1839,
            'description': 'Di s·∫£n thi√™n nhi√™n th·∫ø gi·ªõi v·ªõi h√†ng ngh√¨n ƒë·∫£o ƒë√° v√¥i tuy·ªát ƒë·∫πp'
        },
        {
            'name': 'Ph·ªë C·ªï H·ªôi An',
            'address': 'Ph·ªë c·ªï H·ªôi An',
            'city': 'Qu·∫£ng Nam',
            'country': 'Vi·ªát Nam',
            'latitude': 15.8801,
            'longitude': 108.3380,
            'description': 'Th√†nh ph·ªë c·ªï v·ªõi ki·∫øn tr√∫c ƒë·ªôc ƒë√°o, ƒë√®n l·ªìng lung linh'
        },
        {
            'name': 'Ph·ªë C·ªï H√† N·ªôi',
            'address': 'Ho√†n Ki·∫øm',
            'city': 'H√† N·ªôi',
            'country': 'Vi·ªát Nam',
            'latitude': 21.0285,
            'longitude': 105.8542,
            'description': '36 ph·ªë ph∆∞·ªùng v·ªõi l·ªãch s·ª≠ h√†ng ngh√¨n nƒÉm tu·ªïi'
        },
        {
            'name': 'H·ªì Ho√†n Ki·∫øm',
            'address': 'Trung t√¢m H√† N·ªôi',
            'city': 'H√† N·ªôi',
            'country': 'Vi·ªát Nam',
            'latitude': 21.0285,
            'longitude': 105.8522,
            'description': 'Bi·ªÉu t∆∞·ª£ng c·ªßa Th·ªß ƒë√¥ H√† N·ªôi, h·ªì n∆∞·ªõc ng·ªçt trong l√≤ng th√†nh ph·ªë'
        },
        {
            'name': 'ƒê√† L·∫°t',
            'address': 'Th√†nh ph·ªë ƒê√† L·∫°t',
            'city': 'L√¢m ƒê·ªìng',
            'country': 'Vi·ªát Nam',
            'latitude': 11.9404,
            'longitude': 108.4583,
            'description': 'Th√†nh ph·ªë ng√†n hoa v·ªõi kh√≠ h·∫≠u m√°t m·∫ª quanh nƒÉm'
        },
        {
            'name': 'Sapa',
            'address': 'Th·ªã tr·∫•n Sa Pa',
            'city': 'L√†o Cai',
            'country': 'Vi·ªát Nam',
            'latitude': 22.3363,
            'longitude': 103.8438,
            'description': 'Ru·ªông b·∫≠c thang tuy·ªát ƒë·∫πp, vƒÉn h√≥a d√¢n t·ªôc ƒë·ªôc ƒë√°o'
        },
        {
            'name': 'Nha Trang',
            'address': 'Th√†nh ph·ªë Nha Trang',
            'city': 'Kh√°nh H√≤a',
            'country': 'Vi·ªát Nam',
            'latitude': 12.2388,
            'longitude': 109.1967,
            'description': 'B√£i bi·ªÉn ƒë·∫πp nh·∫•t Vi·ªát Nam v·ªõi n∆∞·ªõc bi·ªÉn trong xanh'
        },
        {
            'name': 'Ph√∫ Qu·ªëc',
            'address': 'ƒê·∫£o Ph√∫ Qu·ªëc',
            'city': 'Ki√™n Giang',
            'country': 'Vi·ªát Nam',
            'latitude': 10.2899,
            'longitude': 103.9840,
            'description': 'ƒê·∫£o ng·ªçc v·ªõi b√£i bi·ªÉn hoang s∆° v√† h·∫£i s·∫£n t∆∞∆°i ngon'
        },
        {
            'name': 'Hu·∫ø',
            'address': 'Th√†nh ph·ªë Hu·∫ø',
            'city': 'Th·ª´a Thi√™n Hu·∫ø',
            'country': 'Vi·ªát Nam',
            'latitude': 16.4637,
            'longitude': 107.5909,
            'description': 'C·ªë ƒë√¥ v·ªõi ki·∫øn tr√∫c cung ƒëi·ªán v√† lƒÉng t·∫©m tr√°ng l·ªá'
        },
        {
            'name': 'H·ªì Ch√≠ Minh',
            'address': 'Trung t√¢m Qu·∫≠n 1',
            'city': 'H·ªì Ch√≠ Minh',
            'country': 'Vi·ªát Nam',
            'latitude': 10.7769,
            'longitude': 106.7009,
            'description': 'Th√†nh ph·ªë nƒÉng ƒë·ªông nh·∫•t Vi·ªát Nam v·ªõi cu·ªôc s·ªëng nh·ªôn nh·ªãp'
        }
    ]
    
    with conn.cursor() as cursor:
        for loc in locations:
            try:
                cursor.execute("SELECT id FROM locations WHERE name = %s", (loc['name'],))
                if cursor.fetchone():
                    print(f"   ‚ö†Ô∏è  Location {loc['name']} ƒë√£ t·ªìn t·∫°i, skip")
                    continue
                
                sql = """
                INSERT INTO locations (name, address, city, country, latitude, longitude, description)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                """
                cursor.execute(sql, (
                    loc['name'],
                    loc['address'],
                    loc['city'],
                    loc['country'],
                    loc['latitude'],
                    loc['longitude'],
                    loc['description']
                ))
                
                print(f"   ‚úÖ {loc['name']}, {loc['city']}")
                
            except Exception as e:
                print(f"   ‚ùå L·ªói t·∫°o location {loc['name']}: {e}")
        
        conn.commit()
    
    print(f"\n‚úÖ Ho√†n t·∫•t t·∫°o locations!")

def create_posts(conn):
    """T·∫°o blog posts th·ª±c t·∫ø"""
    print("\n" + "="*70)
    print("üìù T·∫°o Posts...")
    print("="*70)
    
    # Get users and locations
    with conn.cursor() as cursor:
        cursor.execute("SELECT id, username FROM users WHERE role != 'admin'")
        users = cursor.fetchall()
        
        cursor.execute("SELECT id, name FROM locations")
        locations = cursor.fetchall()
        
        if not users or not locations:
            print("‚ùå C·∫ßn c√≥ users v√† locations tr∆∞·ªõc!")
            return
    
    posts = [
        {
            'title': 'H∆∞·ªõng d·∫´n du l·ªãch H·∫° Long 3 ng√†y 2 ƒë√™m ti·∫øt ki·ªám',
            'content': '''V·ªãnh H·∫° Long l√† m·ªôt trong nh·ªØng ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng nh·∫•t Vi·ªát Nam. Sau chuy·∫øn ƒëi v·ª´a qua, m√¨nh xin chia s·∫ª kinh nghi·ªám du l·ªãch H·∫° Long ti·∫øt ki·ªám nh∆∞ng v·∫´n tr·ªçn v·∫πn.

**Ng√†y 1: Kh√°m ph√° ph·ªë c·ªï H·∫° Long**
- Bu·ªïi s√°ng: Di chuy·ªÉn t·ª´ H√† N·ªôi xu·ªëng H·∫° Long (kho·∫£ng 3-4 ti·∫øng)
- Tr∆∞a: ƒÇn tr∆∞a t·∫°i ch·ª£ H·∫° Long, th·ª≠ h·∫£i s·∫£n t∆∞∆°i s·ªëng
- Chi·ªÅu: Tham quan Sun World H·∫° Long Park, c√°p treo l√™n ƒë·ªânh B·∫£o ƒê√†i
- T·ªëi: D·∫°o quanh ph·ªë c·ªï, th∆∞·ªüng th·ª©c ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng

**Ng√†y 2: Tour du thuy·ªÅn V·ªãnh H·∫° Long**
- C·∫£ ng√†y: Tham gia tour du thuy·ªÅn 1 ng√†y (gi√° kho·∫£ng 400-600k/ng∆∞·ªùi)
- Ho·∫°t ƒë·ªông: Ch√®o kayak, b∆°i l·ªôi, thƒÉm hang ƒë·ªông
- ƒêi·ªÉm ƒë·∫øn: Hang S·ª≠ng S·ªët, ƒê·∫£o Titop, L√†ng ch√†i

**Ng√†y 3: ThƒÉm quan th√™m v√† v·ªÅ**
- S√°ng: Tham quan Qu·∫£ng Ninh Museum (mi·ªÖn ph√≠)
- Tr∆∞a: ƒÇn tr∆∞a v√† mua ƒë·∫∑c s·∫£n
- Chi·ªÅu: Kh·ªüi h√†nh v·ªÅ H√† N·ªôi

**Chi ph√≠ ∆∞·ªõc t√≠nh:** 2-3 tri·ªáu/ng∆∞·ªùi cho c·∫£ chuy·∫øn ƒëi.''',
            'summary': 'Kinh nghi·ªám du l·ªãch V·ªãnh H·∫° Long 3 ng√†y 2 ƒë√™m v·ªõi chi ph√≠ ti·∫øt ki·ªám, tham quan ƒë·∫ßy ƒë·ªß c√°c ƒëi·ªÉm ƒë·∫øn n·ªïi ti·∫øng.',
            'category': 'H∆∞·ªõng d·∫´n du l·ªãch',
            'location': 'V·ªãnh H·∫° Long',
            'tags': '["H·∫° Long", "du l·ªãch ti·∫øt ki·ªám", "3 ng√†y 2 ƒë√™m", "Qu·∫£ng Ninh"]'
        },
        {
            'title': 'Top 10 qu√°n ƒÉn ngon nh·∫•t ƒë·ªãnh ph·∫£i th·ª≠ khi ƒë·∫øn H·ªôi An',
            'content': '''H·ªôi An kh√¥ng ch·ªâ n·ªïi ti·∫øng v·ªõi ph·ªë c·ªï m√† c√≤n l√† thi√™n ƒë∆∞·ªùng ·∫©m th·ª±c. D∆∞·ªõi ƒë√¢y l√† 10 qu√°n ƒÉn m√¨nh ƒë√£ th·ª≠ v√† r·∫•t h√†i l√≤ng:

**1. Cao L·∫ßu Thanh (22 Th√°i Phi√™n)**
- M√≥n ƒë·∫∑c s·∫£n: Cao l·∫ßu
- Gi√°: 30-40k/b√°t
- ƒê√°nh gi√°: 5‚≠ê

**2. B√°nh M√¨ Ph∆∞·ª£ng (2B Phan Ch√¢u Trinh)**
- N·ªïi ti·∫øng kh·∫Øp th·∫ø gi·ªõi
- Gi√°: 20-30k/·ªï
- Ph·∫£i x·∫øp h√†ng ƒë√¥ng!

**3. Com Ga B√† Bu·ªôi (22 Phan Ch√¢u Trinh)**
- C∆°m g√† x√© phay c·ª±c ngon
- Gi√°: 30-35k/ph·∫ßn

**4. M√¨ Qu·∫£ng B√† Mua (1 Tr·∫ßn Cao V√¢n)**
- M√¨ Qu·∫£ng ƒë·∫≠m ƒë√†, th∆°m ngon
- Gi√°: 30-40k/t√¥

**5. White Rose (533 Hai B√† Tr∆∞ng)**
- B√°nh bao v·∫°c - ƒë·∫∑c s·∫£n H·ªôi An
- Gi√°: 40-50k/ph·∫ßn

*C√≤n 5 qu√°n n·ªØa m√¨nh s·∫Ω chia s·∫ª trong b√†i vi·∫øt chi ti·∫øt...*

Nh·ªõ ƒë·∫øn s·ªõm ƒë·ªÉ tr√°nh ƒë√¥ng ƒë√∫c nh√©!''',
            'summary': 'Review chi ti·∫øt 10 qu√°n ƒÉn ngon nh·∫•t H·ªôi An, t·ª´ m√≥n ƒë·∫∑c s·∫£n ƒë·∫øn ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë v·ªõi gi√° c·∫£ h·ª£p l√Ω.',
            'category': '·∫®m th·ª±c',
            'location': 'Ph·ªë C·ªï H·ªôi An',
            'tags': '["H·ªôi An", "·∫©m th·ª±c", "cao l·∫ßu", "b√°nh m√¨", "qu√°n ƒÉn ngon"]'
        },
        {
            'title': 'Checklist ƒë·ªì c·∫ßn mang khi ƒëi Sapa m√πa ƒë√¥ng',
            'content': '''Sapa m√πa ƒë√¥ng r·∫•t l·∫°nh, nhi·ªát ƒë·ªô c√≥ th·ªÉ xu·ªëng 0-5 ƒë·ªô C. ƒê√¢y l√† checklist ƒë·ªì c·∫ßn thi·∫øt m√¨nh ƒë√£ chu·∫©n b·ªã:

**Qu·∫ßn √°o:**
- √Åo kho√°c l√¥ng/phao d√†y
- √Åo len, √°o n·ªâ
- KhƒÉn qu√†ng c·ªï
- GƒÉng tay, m≈© len
- Qu·∫ßn d√†i ·∫•m
- T·∫•t d√†y

**Gi√†y d√©p:**
- Gi√†y th·ªÉ thao ho·∫∑c gi√†y trekking
- T·∫•t len d√†y
- D√©p ƒëi trong ph√≤ng

**Skincare:**
- Kem d∆∞·ª°ng ·∫©m
- Son d∆∞·ª°ng m√¥i
- Kem ch·ªëng n·∫Øng (v·∫´n c·∫ßn!)

**Kh√°c:**
- Thu·ªëc c·∫£m
- Nhi·ªát k·∫ø
- Pin s·∫°c d·ª± ph√≤ng
- T√∫i ni l√¥ng (ƒë·ªÅ ph√≤ng m∆∞a)

**L∆∞u √Ω:**
- ƒê·∫∑t ph√≤ng s·ªõm v√¨ Sapa m√πa ƒë√¥ng r·∫•t ƒë√¥ng kh√°ch
- Chu·∫©n b·ªã ti·ªÅn m·∫∑t v√¨ nhi·ªÅu n∆°i kh√¥ng c√≥ ATM
- Mang theo √¥ ho·∫∑c √°o m∆∞a

Ch√∫c c√°c b·∫°n c√≥ chuy·∫øn ƒëi vui v·∫ª!''',
            'summary': 'H∆∞·ªõng d·∫´n chi ti·∫øt nh·ªØng th·ª© c·∫ßn mang theo khi ƒëi Sapa m√πa ƒë√¥ng, gi√∫p b·∫°n chu·∫©n b·ªã chu ƒë√°o cho chuy·∫øn ƒëi.',
            'category': 'Tips & Tricks',
            'location': 'Sapa',
            'tags': '["Sapa", "m√πa ƒë√¥ng", "checklist", "chu·∫©n b·ªã", "du l·ªãch"]'
        },
        {
            'title': 'ƒê√† L·∫°t - Th√†nh ph·ªë m·ªông m∆° qua ·ªëng k√≠nh c·ªßa t√¥i',
            'content': '''ƒê√† L·∫°t lu√¥n c√≥ s·ª©c h√∫t ƒë·∫∑c bi·ªát v·ªõi t√¥i. Sau 5 l·∫ßn ƒë·∫øn, m·ªói l·∫ßn ƒë·ªÅu mang l·∫°i nh·ªØng c·∫£m x√∫c kh√°c nhau.

**Nh·ªØng ƒë·ªãa ƒëi·ªÉm ch·ª•p ·∫£nh ƒë·∫πp:**

1. **ƒê·ªìi ch√® C·∫ßu ƒê·∫•t**
   - Th·ªùi gian ƒë·∫πp nh·∫•t: S√°ng s·ªõm (5-6h)
   - Tips: Mang theo √°o d√†i ƒë·ªÉ ch·ª•p ·∫£nh
   
2. **H·ªì Tuy·ªÅn L√¢m**
   - View nh√¨n t·ª´ tr√™n cao tuy·ªát ƒë·∫πp
   - C√≥ th·ªÉ thu√™ thuy·ªÅn kayak
   
3. **Ga ƒê√† L·∫°t**
   - Ki·∫øn tr√∫c c·ªï ƒëi·ªÉn Ph√°p
   - ƒê·∫πp c·∫£ ng√†y l·∫´n t·ªëi

4. **Qu·∫£ng tr∆∞·ªùng L√¢m Vi√™n**
   - Bi·ªÉu t∆∞·ª£ng c·ªßa ƒê√† L·∫°t
   - ƒê·∫πp nh·∫•t khi c√≥ ƒë√®n trang tr√≠

5. **Thung l≈©ng ƒê√† L·∫°t**
   - C√°nh ƒë·ªìng hoa r·ªông l·ªõn
   - Nhi·ªÅu g√≥c check-in

**Kinh nghi·ªám ch·ª•p ·∫£nh:**
- ƒêi s·ªõm ƒë·ªÉ tr√°nh ƒë√¥ng ng∆∞·ªùi
- Mang nhi·ªÅu b·ªô ƒë·ªì ƒë·ªÉ thay ƒë·ªïi
- Thu√™ photographer local n·∫øu c·∫ßn (300-500k/set)

ƒê√† L·∫°t l√† n∆°i b·∫°n c√≥ th·ªÉ ch·ª•p ·∫£nh ƒë·∫πp ·ªü b·∫•t c·ª© ƒë√¢u!''',
            'summary': 'Chia s·∫ª nh·ªØng ƒë·ªãa ƒëi·ªÉm ch·ª•p ·∫£nh ƒë·∫πp nh·∫•t ƒê√† L·∫°t c√πng kinh nghi·ªám ch·ª•p ·∫£nh du l·ªãch t·ª´ nhi·ªÅu chuy·∫øn ƒëi.',
            'category': 'Photography',
            'location': 'ƒê√† L·∫°t',
            'tags': '["ƒê√† L·∫°t", "ch·ª•p ·∫£nh", "ƒë·ªãa ƒëi·ªÉm ƒë·∫πp", "photography"]'
        },
        {
            'title': 'Tr·∫£i nghi·ªám homestay view n√∫i tuy·ªát ƒë·∫πp ·ªü Sapa',
            'content': '''L·∫ßn n√†y ƒëi Sapa, m√¨nh ƒë√£ t√¨m ƒë∆∞·ª£c m·ªôt homestay view c·ª±c ƒë·∫πp v√† mu·ªën chia s·∫ª v·ªõi m·ªçi ng∆∞·ªùi.

**Th√¥ng tin homestay:**
- T√™n: Sapa Valley View Homestay
- ƒê·ªãa ch·ªâ: Lao Ch·∫£i, Sapa
- Gi√°: 300-500k/ph√≤ng/ƒë√™m
- View: Ru·ªông b·∫≠c thang v√† n√∫i non

**ƒêi·ªÉm n·ªïi b·∫≠t:**
‚úÖ View t·ª´ ph√≤ng nh√¨n ra ru·ªông b·∫≠c thang
‚úÖ Ch·ªß nh√† th√¢n thi·ªán, nhi·ªát t√¨nh
‚úÖ C√≥ b·ªØa s√°ng mi·ªÖn ph√≠ (ph·ªü, b√°nh m√¨)
‚úÖ Ph√≤ng s·∫°ch s·∫Ω, c√≥ ƒëi·ªÅu h√≤a, n∆∞·ªõc n√≥ng
‚úÖ Ban c√¥ng ri√™ng ƒë·ªÉ ng·∫Øm c·∫£nh

**Ho·∫°t ƒë·ªông:**
- Trekking ƒë·∫øn c√°c b·∫£n l√†ng
- Ng·∫Øm b√¨nh minh tr√™n ban c√¥ng
- BBQ t·ªëi (order th√™m 150k/ng∆∞·ªùi)
- T√¨m hi·ªÉu vƒÉn h√≥a d√¢n t·ªôc

**Booking:**
- N√™n ƒë·∫∑t tr∆∞·ªõc 1-2 tu·∫ßn
- C√≥ th·ªÉ li√™n h·ªá qua Facebook
- Free pick-up t·ª´ trung t√¢m Sapa

ƒê√¢y l√† m·ªôt trong nh·ªØng homestay ƒë·∫πp nh·∫•t m√¨nh t·ª´ng ·ªü!''',
            'summary': 'Review chi ti·∫øt homestay view ƒë·∫πp ·ªü Sapa v·ªõi gi√° c·∫£ h·ª£p l√Ω, view ru·ªông b·∫≠c thang tuy·ªát v·ªùi.',
            'category': 'Accommodation',
            'location': 'Sapa',
            'tags': '["Sapa", "homestay", "accommodation", "view ƒë·∫πp"]'
        },
        {
            'title': 'Kh√°m ph√° ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë H√† N·ªôi trong 24 gi·ªù',
            'content': '''H√† N·ªôi - thi√™n ƒë∆∞·ªùng ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë! ƒê√¢y l√† l·ªãch tr√¨nh ƒÉn u·ªëng m√¨nh ƒë√£ th·ª±c hi·ªán:

**6h s√°ng: Ph·ªü Gia Truy·ªÅn B√°t ƒê√†n**
- ƒê·ªãa ch·ªâ: 49 B√°t ƒê√†n
- Gi√°: 40-50k/t√¥
- Must try!

**9h s√°ng: C√† ph√™ tr·ª©ng Gi·∫£ng**
- ƒê·ªãa ch·ªâ: 39 Nguy·ªÖn H·ªØu Hu√¢n
- Gi√°: 35k/ly
- ƒê·ªôc ƒë√°o, ngon

**12h tr∆∞a: B√∫n ch·∫£ H∆∞∆°ng Li√™n**
- ƒê·ªãa ch·ªâ: 24 L√™ VƒÉn H∆∞u
- Obama t·ª´ng ƒÉn ·ªü ƒë√¢y!
- Gi√°: 40-50k/ph·∫ßn

**3h chi·ªÅu: Ch√® Thanh V√¢n**
- ƒê·ªãa ch·ªâ: 48 Nguy·ªÖn Th·ªã ƒê·ªãnh
- ƒê·ªß lo·∫°i ch√® ngon
- Gi√°: 15-25k/t√¥

**6h t·ªëi: B√∫n ƒë·∫≠u m·∫Øm t√¥m**
- Nhi·ªÅu qu√°n ·ªü H√†ng B·ªì
- Gi√°: 40-60k/ph·∫ßn

**9h t·ªëi: Bia h∆°i T·∫° Hi·ªán**
- Bia t∆∞∆°i + ƒë·ªì nh·∫Øm
- Tr·∫£i nghi·ªám vƒÉn h√≥a ƒë√™m HN

T·ªïng chi ph√≠: kho·∫£ng 300-400k cho c·∫£ ng√†y ƒÉn no n√™!''',
            'summary': 'L·ªãch tr√¨nh kh√°m ph√° ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë H√† N·ªôi trong 24 gi·ªù v·ªõi c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n kh√¥ng th·ªÉ b·ªè qua.',
            'category': '·∫®m th·ª±c',
            'location': 'Ph·ªë C·ªï H√† N·ªôi',
            'tags': '["H√† N·ªôi", "·∫©m th·ª±c", "ph·ªü", "b√∫n ch·∫£", "street food"]'
        }
    ]
    
    with conn.cursor() as cursor:
        for i, post in enumerate(posts):
            try:
                # Random user
                user = random.choice(users)
                
                # Find location
                cursor.execute("SELECT id FROM locations WHERE name = %s", (post['location'],))
                location = cursor.fetchone()
                location_id = location['id'] if location else None
                
                # Published time (last 30 days)
                days_ago = random.randint(1, 30)
                published_at = datetime.now() - timedelta(days=days_ago)
                
                sql = """
                INSERT INTO posts (title, content, summary, author_id, location_id, category, 
                                 tags, status, view_count, like_count, published_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, 'published', %s, %s, %s)
                """
                
                view_count = random.randint(100, 5000)
                like_count = random.randint(10, 500)
                
                cursor.execute(sql, (
                    post['title'],
                    post['content'],
                    post['summary'],
                    user['id'],
                    location_id,
                    post['category'],
                    post['tags'],
                    view_count,
                    like_count,
                    published_at
                ))
                
                print(f"   ‚úÖ {post['title'][:50]}... by {user['username']}")
                
            except Exception as e:
                print(f"   ‚ùå L·ªói t·∫°o post: {e}")
        
        conn.commit()
    
    print(f"\n‚úÖ Ho√†n t·∫•t t·∫°o posts!")

def create_comments(conn):
    """T·∫°o comments cho posts"""
    print("\n" + "="*70)
    print("üí¨ T·∫°o Comments...")
    print("="*70)
    
    with conn.cursor() as cursor:
        # Get users and posts
        cursor.execute("SELECT id FROM users")
        users = cursor.fetchall()
        
        cursor.execute("SELECT id, title FROM posts")
        posts = cursor.fetchall()
        
        if not users or not posts:
            print("‚ùå C·∫ßn c√≥ users v√† posts tr∆∞·ªõc!")
            return
    
    comment_templates = [
        "B√†i vi·∫øt r·∫•t h·ªØu √≠ch! C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª.",
        "M√¨nh ƒë√£ ƒëi r·ªìi, th·ª±c s·ª± r·∫•t ƒë·∫πp nh∆∞ b·∫°n m√¥ t·∫£!",
        "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ chi ph√≠ ƒë∆∞·ª£c kh√¥ng?",
        "L∆∞u l·∫°i ƒë·ªÉ ƒëi sau n√†y. Thanks b·∫°n!",
        "View ƒë·∫πp qu√°! M√¨nh ph·∫£i ƒëi th·ª≠ m·ªõi ƒë∆∞·ª£c.",
        "C√≥ n√™n ƒëi v√†o m√πa n√†y kh√¥ng b·∫°n?",
        "Th√¥ng tin r·∫•t chi ti·∫øt v√† d·ªÖ hi·ªÉu. 5 sao!",
        "B·∫°n ƒëi bao nhi√™u ng√†y v·∫≠y?",
        "C√≥ ƒë√¥ng ng∆∞·ªùi kh√¥ng b·∫°n? M√¨nh s·ª£ m√πa peak.",
        "·∫¢nh ƒë·∫πp qu√°! B·∫°n ch·ª•p b·∫±ng m√°y g√¨ v·∫≠y?",
        "C·∫£m ∆°n b·∫°n ƒë√£ review chi ti·∫øt!",
        "M√¨nh c≈©ng mu·ªën ƒëi l·∫Øm nh∆∞ng ch∆∞a c√≥ c∆° h·ªôi.",
        "B·∫°n book homestay qua app n√†o v·∫≠y?",
        "Gi√° c·∫£ c√≥ h·ª£p l√Ω kh√¥ng b·∫°n?",
        "R·∫•t h·ªØu √≠ch! ƒêang plan ƒëi trong th√°ng n√†y."
    ]
    
    comments_created = 0
    
    with conn.cursor() as cursor:
        for post in posts:
            # Random 2-5 comments per post
            num_comments = random.randint(2, 5)
            
            for _ in range(num_comments):
                user = random.choice(users)
                content = random.choice(comment_templates)
                
                try:
                    sql = """
                    INSERT INTO comments (post_id, user_id, content, like_count)
                    VALUES (%s, %s, %s, %s)
                    """
                    
                    like_count = random.randint(0, 50)
                    cursor.execute(sql, (post['id'], user['id'], content, like_count))
                    comments_created += 1
                    
                except Exception as e:
                    print(f"   ‚ùå L·ªói t·∫°o comment: {e}")
        
        conn.commit()
    
    print(f"   ‚úÖ ƒê√£ t·∫°o {comments_created} comments")
    print(f"\n‚úÖ Ho√†n t·∫•t t·∫°o comments!")

def create_likes(conn):
    """T·∫°o likes cho posts"""
    print("\n" + "="*70)
    print("‚ù§Ô∏è  T·∫°o Likes...")
    print("="*70)
    
    with conn.cursor() as cursor:
        cursor.execute("SELECT id FROM users")
        users = cursor.fetchall()
        
        cursor.execute("SELECT id FROM posts")
        posts = cursor.fetchall()
        
        if not users or not posts:
            print("‚ùå C·∫ßn c√≥ users v√† posts tr∆∞·ªõc!")
            return
    
    likes_created = 0
    
    with conn.cursor() as cursor:
        for post in posts:
            # Random users like this post
            num_likes = random.randint(5, len(users))
            liked_users = random.sample(users, num_likes)
            
            for user in liked_users:
                try:
                    sql = "INSERT INTO likes (user_id, post_id) VALUES (%s, %s)"
                    cursor.execute(sql, (user['id'], post['id']))
                    likes_created += 1
                except:
                    pass  # Skip duplicates
        
        conn.commit()
    
    print(f"   ‚úÖ ƒê√£ t·∫°o {likes_created} likes")
    print(f"\n‚úÖ Ho√†n t·∫•t t·∫°o likes!")

def create_followers(conn):
    """T·∫°o follow relationships"""
    print("\n" + "="*70)
    print("üë• T·∫°o Followers...")
    print("="*70)
    
    with conn.cursor() as cursor:
        cursor.execute("SELECT id FROM users WHERE role != 'admin'")
        users = cursor.fetchall()
        
        if len(users) < 2:
            print("‚ùå C·∫ßn √≠t nh·∫•t 2 users!")
            return
    
    followers_created = 0
    
    with conn.cursor() as cursor:
        for user in users:
            # Each user follows 1-3 other users
            num_following = random.randint(1, min(3, len(users)-1))
            
            # Get other users
            other_users = [u for u in users if u['id'] != user['id']]
            following_users = random.sample(other_users, num_following)
            
            for following in following_users:
                try:
                    sql = "INSERT INTO followers (follower_id, following_id) VALUES (%s, %s)"
                    cursor.execute(sql, (user['id'], following['id']))
                    followers_created += 1
                except:
                    pass  # Skip duplicates
        
        conn.commit()
    
    print(f"   ‚úÖ ƒê√£ t·∫°o {followers_created} follow relationships")
    print(f"\n‚úÖ Ho√†n t·∫•t t·∫°o followers!")

def show_summary(conn):
    """Hi·ªÉn th·ªã t√≥m t·∫Øt data ƒë√£ t·∫°o"""
    print("\n" + "="*70)
    print("üìä SUMMARY - D·ªÆ LI·ªÜU ƒê√É T·∫†O")
    print("="*70)
    
    with conn.cursor() as cursor:
        tables = {
            'users': 'Users',
            'locations': 'Locations',
            'posts': 'Posts',
            'comments': 'Comments',
            'likes': 'Likes',
            'followers': 'Followers'
        }
        
        for table, name in tables.items():
            cursor.execute(f"SELECT COUNT(*) as count FROM {table}")
            count = cursor.fetchone()['count']
            print(f"   {name:.<20} {count:>5} records")
    
    print("\n" + "="*70)
    
    # Show sample data
    with conn.cursor() as cursor:
        print("\nüìù Sample Users:")
        cursor.execute("SELECT username, email, role FROM users LIMIT 5")
        for user in cursor.fetchall():
            print(f"   - {user['username']:.<20} {user['email']:.<30} [{user['role']}]")
        
        print("\nüìç Sample Locations:")
        cursor.execute("SELECT name, city FROM locations LIMIT 5")
        for loc in cursor.fetchall():
            print(f"   - {loc['name']}, {loc['city']}")
        
        print("\nüì∞ Sample Posts:")
        cursor.execute("""
            SELECT p.title, u.username, p.view_count, p.like_count 
            FROM posts p 
            JOIN users u ON p.author_id = u.id 
            LIMIT 5
        """)
        for post in cursor.fetchall():
            print(f"   - {post['title'][:40]}... by {post['username']} ({post['view_count']} views, {post['like_count']} likes)")

def main():
    """Main function"""
    print("\n" + "="*70)
    print("üöÄ SEED REAL DATA FOR VIEGO BLOG")
    print("="*70)
    print("T·∫°o d·ªØ li·ªáu th·ª±c t·∫ø cho database...")
    print()
    
    conn = get_connection()
    if not conn:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database!")
        return
    
    try:
        create_users(conn)
        create_locations(conn)
        create_posts(conn)
        create_comments(conn)
        create_likes(conn)
        create_followers(conn)
        show_summary(conn)
        
        print("\n" + "="*70)
        print("‚úÖ HO√ÄN T·∫§T T·∫†O D·ªÆ LI·ªÜU!")
        print("="*70)
        print("\nüìù Th√¥ng tin ƒëƒÉng nh·∫≠p:")
        print("   Admin:  admin@viego.com / Admin@123")
        print("   User:   vana@gmail.com / User@123")
        print("   Editor: editor@viego.com / Editor@123")
        print("\nüöÄ C√≥ th·ªÉ kh·ªüi ƒë·ªông project ngay:")
        print("   .\\run_fullstack.bat")
        print()
        
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
    finally:
        conn.close()

if __name__ == "__main__":
    main()
